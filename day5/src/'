use log::{debug, info, warn, error};
use itertools::Itertools;
use env_logger;
use nom::bytes::complete::tag;
use nom::character::complete::{space1, newline};
use nom::multi::{separated_list0, separated_list1, many0, fold_many1};
use nom::sequence::{terminated, preceded, pair, separated_pair};
use regex::CaptureMatches;
use once_cell::sync::Lazy;

use std::boxed;
use std::collections::{HashMap, HashSet};
use std::fmt::Debug;

use advent::{InputSnake, FromRegex};
use nom::{self, character, IResult, Parser};

#[derive(Debug, Clone)]
struct AlmanacMaps {
    maps: Vec<AlmanacMap>,
}

#[derive(Debug, Clone, Copy)]
struct AlmanacMap {
    destination_range_start: u32,
    source_range_start: u32,
    range_len: u32,
}

#[derive(Debug)]
struct Almanac {
    seeds: Vec<u32>,
    almanac_maps: Vec<AlmanacMaps>,
}

impl AlmanacMaps {
    pub fn get(&self, source: u32) -> u32 {
        for map in self.maps.iter() {
            if map.in_range(source) {
                return map.get(source);
            }
        }

        return source;
    }
}

impl AlmanacMap {
    pub fn in_range(&self, source: u32) -> bool {
        self.source_range_start <= source && source < self.source_range_start + self.range_len
    }

    pub fn get(&self, source: u32) -> u32 {
        if self.source_range_start <= source && source < self.source_range_start + self.range_len {
            let diff = source - self.source_range_start;
            return self.destination_range_start + diff;
        }

        panic!("Must be in range");
    }
}

const ALMANAC_MAP_NAMES: [&'static str; 7] = [
    "seed-to-soil map:",
    "soil-to-fertilizer map:",
    "fertilizer-to-water map:",
    "water-to-light map:",
    "light-to-temperature map:",
    "temperature-to-humidity map:",
    "humidity-to-location map:",
];

/// ------
/// Part 1
/// ------

fn parse_almanac(input: &str) -> IResult<&str, Almanac> {
    // seeds: 79 14 55 13
    let (input, seeds) = preceded(
        tag("seeds: "),
        separated_list1(
            space1,
            nom::character::complete::u32
        )
    )(input)?;

    let mut map_input = input;
    let mut almanac_maps: Vec<AlmanacMaps> = Vec::new();
    for almanac_map_name in ALMANAC_MAP_NAMES {
        let (input, _) = many0(newline)(map_input)?;
        let (input, _) = pair(
            tag(almanac_map_name),
            newline
        )(input)?;
        let (input, maps) = separated_list1(
            newline,
            separated_list1(
                space1,
                nom::character::complete::u32,
            ).map(|values| AlmanacMap {
                destination_range_start: *values.get(0).unwrap(),
                source_range_start: *values.get(1).unwrap(),
                range_len: *values.get(2).unwrap(),
            })
        )(input)?;

        map_input = input;
        almanac_maps.push(AlmanacMaps { maps });
    }

    Ok((
        map_input,
        Almanac {
            seeds,
            almanac_maps,
        }
    ))
}

fn part_one_test() {
    let input = InputSnake::new("test_input");
    let no_snake = input.no_snake();
    let (_, almanac) = parse_almanac(&no_snake).unwrap();
    // dbg!(almanac);
    
    let closest_location = almanac.seeds.into_iter()
        .map(|seed| almanac.almanac_maps.iter()
            .fold(seed, |acc, maps| maps.get(acc)))
        .min()
        .unwrap();

    info!("{:?}", closest_location);
}

fn part_one() {
    let input = InputSnake::new("input");
    let no_snake = input.no_snake();
    let (_, almanac) = parse_almanac(&no_snake).unwrap();
    
    let closest_location = almanac.seeds.into_iter()
        .map(|seed| almanac.almanac_maps.iter()
            .fold(seed, |acc, maps| maps.get(acc)))
        .min()
        .unwrap();

    info!("{:?}", closest_location);
}

/// ------
/// Part 2
/// ------

#[derive(Debug, Clone, Copy)]
struct Seeds {
    range_start: u32,
    range_len: u32,
}

#[derive(Debug)]
struct AlmanacTwo {
    seeds: Vec<Seeds>,
    almanac_maps: Vec<AlmanacMaps>,
}

impl Seeds {
    pub fn seeds(&self) -> std::ops::Range<u32> {
        self.range_start..(self.range_start + self.range_len)
    }
}

impl AlmanacTwo {
    pub fn all_seeds(&self) -> Box<dyn Iterator<Item=u32>> {
        Box::new(self.seeds.clone().into_iter()
            .flat_map(|seeds| seeds.seeds()))
    }
}

fn parse_almanac_two(input: &str) -> IResult<&str, AlmanacTwo> {
    // seeds: 79 14 55 13
    let (input, seeds) = preceded(
        tag("seeds: "),
        separated_list1(
            space1,
            separated_pair(
                nom::character::complete::u32,
                space1,
                nom::character::complete::u32
            ).map(|(range_start, range_len)| Seeds {
                range_start,
                range_len
            })
        )
    )(input)?;

    let mut map_input = input;
    let mut almanac_maps: Vec<AlmanacMaps> = Vec::new();
    for almanac_map_name in ALMANAC_MAP_NAMES {
        let (input, _) = many0(newline)(map_input)?;
        let (input, _) = pair(
            tag(almanac_map_name),
            newline
        )(input)?;
        let (input, maps) = separated_list1(
            newline,
            separated_list1(
                space1,
                nom::character::complete::u32,
            ).map(|values| AlmanacMap {
                destination_range_start: *values.get(0).unwrap(),
                source_range_start: *values.get(1).unwrap(),
                range_len: *values.get(2).unwrap(),
            })
        )(input)?;

        map_input = input;
        almanac_maps.push(AlmanacMaps { maps });
    }

    Ok((
        map_input,
        AlmanacTwo {
            seeds,
            almanac_maps,
        }
    ))
}

fn part_two_test() {
    let input = InputSnake::new("test_input");
    let no_snake = input.no_snake();
    let (_, almanac) = parse_almanac_two(&no_snake).unwrap();
    
    let closest_location = almanac.all_seeds().into_iter()
        .map(|seed| almanac.almanac_maps.iter()
            .fold(seed, |acc, maps| maps.get(acc)))
        .min()
        .unwrap();

    let flat_almanac = flatten(almanac.almanac_maps);

    info!("{:?}", flat_almanac);
    info!("{:?}", closest_location);
}

fn part_two() {
    let input = InputSnake::new("input");
    let no_snake = input.no_snake();
    let (_, almanac) = parse_almanac_two(&no_snake).unwrap();
    
    let closest_location = almanac.all_seeds().into_iter()
        // .inspect(|seed| println!("{}", seed))
        .map(|seed| almanac.almanac_maps.iter()
            .fold(seed, |acc, maps| maps.get(acc)))
        .min()
        .unwrap();

    info!("{:?}", closest_location);
}

fn flatten(mut almanac_maps: Vec<AlmanacMaps>) -> AlmanacMaps {
    if almanac_maps.len() == 1 {
        return almanac_maps.get(0).unwrap().clone();
    }

    let srcs = almanac_maps.get(0).unwrap();
    let dsts = almanac_maps.get(1).unwrap();
    let mut flattened_maps = Vec::new();
    for src in srcs.maps.iter() {
        for dst in dsts.maps.iter() {
            let mut maps = flatten_almanac_maps(src, dst);
            flattened_maps.append(&mut maps)
        }
    }

    almanac_maps.insert(0, AlmanacMaps { maps: flattened_maps });
    return flatten(almanac_maps);
}

fn flatten_almanac_maps(src: &AlmanacMap, dst: &AlmanacMap) -> Vec<AlmanacMap> {
    // handle the cases in which src overlaps with dst, of which there are three:
    // 1. left-side of dst
    //
    //         dst+len                dst + len
    //      src |---|      ->      src |--|--|
    //      dst   |---|            dst   dst xxxx|
    //           src+len	
    //
    // 2. middle of dst
    //
    //             dst +len                  dst + len
    //      src     |---|             src     |----|
    //      dst   |--------|    ->    dst |xx   dst xx|
    //           src  +   len	
    //
    // 3. right-side of dst
    //
    //             dst+len                        dst+len
    //      src     |---|       ->     src      |--|--|
    //      dst   |---|                dst |xxxx   dst
    //           src+len	

    // 1. left-side of dst
    if src.destination_range_start <= dst.source_range_start
        && src.destination_range_start + src.range_len <= dst.source_range_start + dst.range_len 
        && src.destination_range_start + src.range_len <= dst.source_range_start + dst.range_len {

        let offset = (src.destination_range_start + src.range_len) - dst.source_range_start;

        return vec!(
            AlmanacMap {
                destination_range_start: src.destination_range_start,
                source_range_start: src.source_range_start,
                range_len: src.range_len - offset,
            },
            AlmanacMap {
                destination_range_start: dst.destination_range_start,
                source_range_start: src.source_range_start,
                range_len: offset,
            },
        );
    }
    
    // 2. middle of dst
    if src.destination_range_start >= dst.source_range_start
        && src.destination_range_start + src.range_len <= dst.source_range_start + dst.range_len {

        let offset = src.destination_range_start - dst.source_range_start;

        return vec!(
            AlmanacMap {
                destination_range_start: dst.destination_range_start + offset,
                source_range_start: src.source_range_start,
                range_len: src.range_len,
            },
        );
    }

    // 3. right-side of dst
    if src.destination_range_start >= dst.source_range_start
        && src.destination_range_start + src.range_len >= dst.source_range_start + dst.range_len
        && src.destination_range_start <= dst.source_range_start + dst.range_len {

        let offset = (dst.source_range_start + dst.range_len) - src.destination_range_start;

        return vec!(
            AlmanacMap {
                destination_range_start: dst.destination_range_start + offset,
                source_range_start: src.source_range_start,
                range_len: offset,
            },
            AlmanacMap {
                destination_range_start: src.destination_range_start + offset,
                source_range_start: src.source_range_start + offset,
                range_len: src.range_len - offset,
            },
        );
    }

    // if there is no overlap, then the second map is a no-op, so return the first map
    return vec!(AlmanacMap {
        destination_range_start: src.destination_range_start,
        source_range_start: src.source_range_start,
        range_len: src.range_len,
    });
}

fn main() {
    env_logger::init_from_env(env_logger::Env::default()
        .filter_or(env_logger::DEFAULT_FILTER_ENV, "debug"));

    let map1 = AlmanacMap {
        destination_range_start: 10,
        source_range_start: 20,
        range_len: 5,
    };
    let map2 = AlmanacMap {
        destination_range_start: 5,
        source_range_start: 5,
        range_len: 10,
    };

    let flattened = flatten_almanac_maps(&map1, &map2);
    info!("{:?}", flattened);

    // |10--5|
    // |--3|
    // |-------10|

    //10 20 5
    //
    //20 -> 10
    //21 -> 11
    //22 -> 12
    //23 -> 13
    //24 -> 14
    //
    //
    //5 10 3
    //
    //10 -> 5
    //11 -> 6
    //12 -> 7
    //
    //
    //20 -> 10 -> 5
    //21 -> 11 -> 6
    //22 -> 12 -> 7
    //23 -> 13
    //24 -> 14
    //
    //5  20 3
    //13 23 2


    // info!("Part One Test");
    // part_one_test();
    // info!("Part One");
    // part_one();
 
    info!("Part Two Test");
    part_two_test();
    // info!("Part Two");
    // part_two();
    // let range = (1514493331.. 295250933);
    // for r in range {
    //     let i = r + 1;
    // }
}
